@layer ui-block {
  :host(ui-block), :host(ui-block) :where(*), :host(ui-block) ::slotted(*) {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-tap-highlight-color: transparent;
    user-drag: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    -webkit-user-drag: none;
    -moz-user-drag: none;
    /* */
    box-sizing: border-box;
    touch-action: none;
    /* */
    white-space: nowrap;
    white-space-collapse: collapse;
    text-wrap: nowrap;
    text-spacing-trim: trim-start;
  }
  :host(ui-block), :host(ui-block) > :where(*) {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    word-break: keep-all;
    word-wrap: normal;
    flex-wrap: nowrap;
    line-height: 0;
    place-content: center;
    place-items: center;
    pointer-events: none;
  }
  :host(ui-block) {
    inline-size: 100%;
    block-size: -moz-max-content;
    block-size: max-content;
    min-block-size: var(--decor-size);
  }
  :host(ui-block) {
    display: inline grid;
    grid-template-columns: minmax(max-content, var(--decor-size)) minmax(0px, 1fr) minmax(max-content, var(--decor-size));
    grid-template-rows: minmax(max-content, var(--decor-size));
  }
  :host(ui-block) {
    --decor-size: 2.8rem;
  }
  :host(ui-block) {
    contain: none;
    position: relative;
    container-type: normal;
    pointer-events: none;
    cursor: pointer;
    overflow: visible;
    place-self: end;
    place-content: end;
    place-items: end;
    text-align: end;
    justify-content: space-between;
  }
  :host(ui-block) :where(script, link, style) {
    display: none !important;
    pointer-events: none !important;
  }
  :host(ui-block) > :where(*:not(script, link, style)) {
    inline-size: 100%;
    block-size: -moz-max-content;
    block-size: max-content;
    pointer-events: none;
  }
  :host(ui-block) > :where(*:not(script, link, style)) {
    display: flex;
    inset: 0px;
    pointer-events: none;
    background-clip: border-box;
    background-origin: content-box;
    background-color: transparent;
    background-image: none;
    padding-inline: calc(var(--decor-size) * 0.3);
    padding-block: calc(var(--decor-size) * 0.3);
    overflow: visible;
    flex-grow: 0;
    flex-basis: auto;
    flex-shrink: 0;
    z-index: 99;
    inset-inline-end: auto;
    inset-block-end: auto;
    place-content: center;
    place-items: center;
    text-align: center;
    justify-self: end;
    justify-content: center;
    justify-items: center;
    box-sizing: border-box;
    grid-column: 1/1 span;
    grid-row: 1/1 span;
  }
  :host(ui-block) ::slotted(*:not([inert], span, ui-icon)) {
    pointer-events: auto;
  }
  :host(ui-block) > *:where([data-place=label], :not([data-place])) {
    inline-size: 100%;
  }
  :host(ui-block) > *:where([data-place=label], :not([data-place])) {
    padding-inline: calc(var(--decor-size) * 0.2);
    place-self: center;
    text-align: start;
    justify-self: end;
    justify-content: start;
    justify-items: start;
  }
  :host(ui-block) > *[data-place=element] {
    inline-size: -moz-max-content;
    inline-size: max-content;
  }
  :host(ui-block) > *[data-place=element] {
    min-inline-size: 100%;
  }
  :host(ui-block) > *[data-place=element] {
    pointer-events: none;
    aspect-ratio: auto;
    justify-self: end;
  }
  :host(ui-block) > *[data-place=icon] {
    inline-size: var(--decor-size, 100%);
    block-size: var(--decor-size, 100%);
    max-inline-size: 100%;
    max-block-size: 100%;
    place-self: center;
  }
  :host(ui-block) > *[data-place=icon] {
    aspect-ratio: 1/1;
    justify-self: start;
  }
  :host(ui-block) > *[data-place=icon] {
    grid-column: 1/1 span;
    grid-row: 1/1 span;
  }
  :host(ui-block) > *[data-place=element] {
    grid-column: 3/3 span;
    grid-row: 1/1 span;
  }
  :host(ui-block) > *:where([data-place=label], :not([data-place])) {
    grid-column: 2/2 span;
    grid-row: 1/1 span;
  }
  :host(ui-block.layout-alt) {
    grid-template-columns: minmax(var(--decor-size), max-content) minmax(0px, 1fr);
    grid-template-rows: minmax(var(--decor-size), max-content) minmax(var(--decor-size), max-content);
  }
  :host(ui-block.layout-alt) {
    overflow: visible;
    block-size: -moz-max-content;
    block-size: max-content;
  }
  :host(ui-block.layout-alt) > *[data-place=icon] {
    grid-column: 1/1 span;
    grid-row: 1/1 span;
    justify-self: start;
  }
  :host(ui-block.layout-alt) > *[data-place=element] {
    grid-column: 1/2 span;
    grid-row: 2/2 span;
    justify-self: start;
    align-self: start;
    justify-content: start;
  }
  :host(ui-block.layout-alt) > *:where([data-place=label], :not([data-place])) {
    grid-column: 2/2 span;
    grid-row: 1/1 span;
    justify-self: start;
  }
}/*# sourceMappingURL=de-block.css.map */