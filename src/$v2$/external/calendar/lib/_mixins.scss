//
@use "sass:string";
@use "sass:meta";

//
@mixin contrast($name, $from, $alpha: 1, $chromaReduce: 0.4) {
    & { #{$name}: string.unquote("oklch(from #{$from} calc( clamp(-1, calc((l - 0.6) * 100000), 1) * 0.4 + 0.5) calc(c * #{$chromaReduce}) h / #{$alpha})"); };
};

//
@mixin in-contrast($name, $from, $alpha: 1, $chromaReduce: 0.4) {
    & { #{$name}: string.unquote("oklch(from #{$from} calc( clamp(-1, calc((0.6 - l) * 100000), 1) * 0.4 + 0.5) calc(c * #{$chromaReduce}) h / #{$alpha})"); };
};

//
@mixin hover ($selector: "&") {
    @media screen and ((hover: hover) or (pointer: fine)) { #{$selector}:hover { @content; }; };
    @media screen and ((hover: none) and (pointer: coarse)) { #{$selector}:action { @content; }; };
};

//
@function tm-hi($base, $percent) {
    @return color-mix(in oklch, #{$base} calc(100% - #{$percent}), var(--tm-hi, white));
};

//
@function tm-lo($base, $percent) {
    @return color-mix(in oklch, #{$base} calc(100% - #{$percent}), var(--tm-lo, black));
};

//
@mixin tm-dep($property, $light, $dark, $fb: var(--tm-scheme)) {
    & { #{$property}: color-mix(in oklch, #{$light} calc(100% * #{var(--tm-scheme)}), #{$dark}); }

    //
    @supports(color: light-dark(white, black)) {
        #{$property}: light-dark(#{$light}, #{$dark});
    }
};

//
@mixin inverse {
    // origin color is base, but with theme tone
    @include tm-dep("--tm-cr", "var(--tm-cr-dark)", "var(--tm-cr-light)");

    // low-up version of origin color
    & { --tm-ac: #{tm-lo(var(--tm-origin, currentColor), 80%)}; }
};
