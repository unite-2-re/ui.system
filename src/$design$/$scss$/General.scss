//
@scope(:host, :scope, :root) {
    //
    @property --data-taskbar-shift
    {
        inherits: true;
        syntax: "<length-percentage>";
        initial-value: 0px;
    }

    //
    @property --rx {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --ry {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }


    //
    @property --sp-x {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --sp-y {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }


    //
    @property --inline-size {
        initial-value: 100%;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --block-size {
        initial-value: 100%;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --bound-inline-size {
        initial-value: 100cqi;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --bound-block-size {
        initial-value: 100cqb;
        syntax: "<length-percentage>";
        inherits: true;
    }


    //
    @property --limit-drag-x {
        initial-value: 100%;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --limit-drag-y {
        initial-value: 100%;
        syntax: "<length-percentage>";
        inherits: true;
    }



    //
    @property --ds-x {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --ds-y {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --rs-x {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --rs-y {
        initial-value: 0px;
        syntax: "<length-percentage>";
        inherits: true;
    }


    //
    @property --initial-inline-size {
        initial-value: 100%;
        syntax: "<length-percentage>";
        inherits: true;
    }

    //
    @property --initial-block-size {
        initial-value: 100%;
        syntax: "<length-percentage>";
        inherits: true;
    }
};

//
@scope(:host, :root, :scope) {
    //
    @property --value {
        initial-value: 0;
        syntax: "<number>";
        inherits: true;
    }

    //
    @property --max-value {
        initial-value: 0;
        syntax: "<number>";
        inherits: true;
    }
};

//
@layer ui-frame-fix {

    //
    ui-frame[data-dragging] {
        & { will-change: transform !important; };
        :where(*) {
            animation: none !important;
            animation-duration: 0ms !important;
            transition: none !important;
            transition-duration: 0ms !important;
            box-shadow: none !important;
        }
    }

    // if has identified, do top level
    ui-frame:has(:target),
    ui-frame:target
    {
        & {
            --z-index: 0;
            z-index: calc(1099 + var(--z-index, 0));
            display: inline grid;
        }

        // revert visibility if hidden (may not help)
        ::slotted(.ui-content[data-hidden]) {
            display: revert-layer;
        }
    }

    //
    ui-frame:where([data-hidden], :empty, :has(.ui-content[data-hidden]), :has(.ui-content:empty), :not(:has(.ui-content)))
        { display: none; };

    //
    ui-frame .ui-content {
        inline-size: 100%;
        block-size: 100%;
        overflow: hidden;
    }

    //
    body:not(:has(ui-frame:not([data-hidden]))) ui-modal {
        --tm-bg-alpha: 0.9;
    }

    //
    body:not(:has(ui-frame:not([data-hidden]))) ui-navbar
    {
        //
        & {
            --tm-bg-alpha: 0;
            --tm-chroma: 0;
            --hl-co: 0;
        }

        //
        & {
            box-shadow: none;
            pointer-events: none;
        }

        //
        &, & * { --hl-co: 0; }
        &::part(ui-title-handle) { pointer-events: none; }
    }

    //
    body:not(:has(ui-frame:not([data-hidden]))):not(:has(ui-taskbar:not([data-hidden]))) ui-navbar
        {&::part(ui-back-button) { display: none; }}

    //
    @media (((hover: hover) or (pointer: fine)) and ((width >= 9in) or (orientation: landscape))) {

        //
        body:has(ui-frame:not([data-hidden])) ui-taskbar
        {
            & { --data-taskbar-shift: 2.5rem; }
            &:hover, &:active { --data-taskbar-shift: 0px; }
            &:not(:hover, :active) { --data-taskbar-shift: 2.5rem; }
        }

        //
        body:not(:has(ui-frame:not([data-hidden]))) ui-taskbar
        {
            & {
                --tm-bg-alpha: 0;
                --tm-chroma: 0;
                --hl-co: 0;
            }

            //
            & {
                box-shadow: none;
                pointer-events: none;
            }
        }

    }

    //
    ui-number input::-webkit-outer-spin-button,
    ui-number input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    //
    ui-switch {
        & {
            --value: 0;
            --max-value: 1;
        }

        //
        @for $i from 1 through 3 {
            input[type="radio"]:nth-child(#{$i}) { order: #{$i}; };
            &:has(input[type="radio"]:last-child:nth-child(#{$i})) { --max-value: #{$i - 1}; };
            &:has(input[type="radio"]:checkbox:nth-child(#{$i})) { --value: #{$i - 1}; };
        }

        //
        &:has(input[type="checkbox"]) { transition: --value 100ms linear; --max-value: 1; }
        &:has(input[type="checkbox"]:checkbox) { --value: 1; }
    }
}
