//
@mixin computeGrid() {
    //
    --p-cell-x: var(--cell-x);
    --p-cell-y: var(--cell-y);

    // CLAMPED GRID
    --f-col: clamp(4, var(--layout-c, 4), 6);
    --f-row: clamp(8, var(--layout-r, 8), 12);

    //
    --fc-cell-x: calc(clamp(0, var(--cell-x), calc(var(--f-col) - 1)) + 1);
    --fc-cell-y: calc(clamp(0, var(--cell-y), calc(var(--f-row) - 1)) + 1);

    //
    --fp-cell-x: calc(clamp(0, var(--p-cell-x), calc(var(--f-col) - 1)) + 1);
    --fp-cell-y: calc(clamp(0, var(--p-cell-y), calc(var(--f-row) - 1)) + 1);

    //
    --dir-x: calc(var(--fc-cell-x) - var(--fp-cell-x));
    --dir-y: calc(var(--fc-cell-y) - var(--fp-cell-y));

    //
    --grid-c: var(--fc-cell-x);
    --grid-r: var(--fc-cell-y);
}

//
@scope(:host, :scope, :root) {
    @property --ox-c-span { syntax: "<number>"; initial-value: 1; inherits: true; }
    @property --ox-r-span { syntax: "<number>"; initial-value: 1; inherits: true; }
    @property --ox-c-unit { syntax: "<length-percentage>"; initial-value: 1px; inherits: true; }
    @property --ox-r-unit { syntax: "<length-percentage>"; initial-value: 1px; inherits: true; }

    //
    @property --r-gap { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }
    @property --c-gap { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }
    @property --dir-x { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --dir-y { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --f-col { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --f-row { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --drag-x { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --drag-y { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --grid-c { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --grid-r { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }

    //
    @property --p-drag-x { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --p-drag-y { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --layout-r { syntax: "<integer>"; initial-value: 1; inherits: true; }
    @property --layout-c { syntax: "<integer>"; initial-value: 1; inherits: true; }
    @property --p-cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --p-cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --fc-cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --fc-cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --fp-cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
    @property --fp-cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }

    //
    @property --c-shift-mod { syntax: "<number>"; initial-value: 0; inherits: true; }
    @property --r-shift-mod { syntax: "<number>"; initial-value: 0; inherits: true; }
}

//
@layer u2-grid-box {

    //
    .u2-grid-layout {

        //
        & {
            --c-gap: clamp(min(1rem, 8cqmin), min(calc(8cqmin / min(var(--layout-c, 4), var(--layout-r, 8))), calc(6cqmax / max(var(--layout-c, 4), var(--layout-r, 8)))), min(4rem, 16cqmin));
            --r-gap: clamp(min(1rem, 8cqmin), min(calc(8cqmin / min(var(--layout-c, 4), var(--layout-r, 8))), calc(6cqmax / max(var(--layout-c, 4), var(--layout-r, 8)))), min(4rem, 16cqmin));
        }

        //
        & {
            display: block flow;
            position: relative;

            //
            container-name: u2-grid;
            container-type: size;
            contain: size layout;

            //
            zoom: 1;
            direction: ltr;

            //
            pointer-events: none;
            background-color: transparent;

            //
            inline-size: 100%;
            block-size: 100%;
        }

        //
        & > :where(*) {
            @include computeGrid();

            // calculate visible size
            & { --icon-size: min((100cqmin / min(calc(var(--layout-c, 4) / var(--ox-c-span, 1)), calc(var(--layout-r, 8) / var(--ox-r-span, 1)))) - 0.5 * min(var(--c-gap, 1rem), var(--r-gap, 1rem)), 6rem); }
            & * {--drag-x: 0; --drag-y: 0; }

            // dragging coordinate
            & {
                --drag-x: 0; --cs-drag-x: calc(var(--drag-x, 0) * 1px);
                --drag-y: 0; --cs-drag-y: calc(var(--drag-y, 0) * 1px);
            }

            // compute grid insets
            // TODO: use native grid (needs Agate.UX grid system)
            & {
                --ox-c-unit: calc(var(--os-size-x, 100cqi) / var(--layout-c, 0));
                --ox-r-unit: calc(var(--os-size-y, 100cqb) / var(--layout-r, 0));
                --os-inset-x: calc((var(--grid-c) - 0.5) * var(--ox-c-unit));
                --os-inset-y: calc((var(--grid-r) - 0.5) * var(--ox-r-unit));
            }

            //
            & {
                position: absolute;
                transform-origin: 0% 0%;
                transform:
                    translate3d(
                        round(nearest, var(--cs-drag-x, 0px), calc(1px / var(--pixel-ratio, 1))),
                        round(nearest, var(--cs-drag-y, 0px), calc(1px / var(--pixel-ratio, 1))),
                        0px)
                    scale3d(var(--scale, 1), var(--scale, 1), var(--scale, 1))
                    translate3d(
                        round(nearest, calc(var(--translate-x, 0px) - 50%), calc(1px / var(--pixel-ratio, 1))),
                        round(nearest, calc(var(--translate-y, 0px) - 50%), calc(1px / var(--pixel-ratio, 1))),
                        0px) !important;

                //
                inset: var(--cs-inset-y, 0px) auto auto var(--cs-inset-x, 0px);

                //
                zoom: 1;
                place-self: center;

                //
                min-inline-size: 1px;
                min-block-size: 1px;

                //
                inline-size: 100%;//max-content;
                block-size: 100%;//max-content;

                //
                max-inline-size: var(--icon-size, 1px);
                max-block-size: var(--icon-size, 1px);

                //
                pointer-events: none;
                touch-action: none;
                user-select: none;
                -webkit-user-drag: none;
                -moz-user-drag: none;

                //
                overflow: visible;
            }

            //
            & {
                transition-behavior: allow-discrete;
                transition-property: transform;
                transition-duration: calc(var(--drag-d, 0.01) * 0.8ms);
                transition-timing-function: linear ;
                transition-delay: 0ms;
            }

            // if interpolation keywords supported
            @supports (min-inline-size: max(1px, max-content)) {
                min-inline-size: max(1px, max-content);
                min-block-size: max(1px, max-content);
            }

            //
            & > :where(*) {
                inline-size: 100%;
                block-size: 100%;
            }
        }

        //
        & > :where(*[data-dragging]) {
            --grid-c: var(--fp-cell-x);
            --grid-r: var(--fp-cell-y);
        }
    }
}
